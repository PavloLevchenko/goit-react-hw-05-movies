{"version":3,"file":"static/js/786.343487b7.chunk.js","mappings":"mPAMaA,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,EAAQ,kCAHF,IAGE,aACd,OACE,SAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,QAAQ,OAAOC,oBAAqBJ,EAAjD,SACGD,EAAMM,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACtC,OACE,UAACR,EAAA,EAAD,CAAmBC,GAAG,KAAKQ,EAAG,EAAGP,QAAQ,OAAOQ,aAAa,gBAA7D,WACE,SAACC,EAAA,EAAD,CAAUC,YAAaJ,EAAcK,MATnC,IASF,UAAoD,SAAC,MAAD,CAAUC,KAT5D,SAUF,UAACd,EAAA,EAAD,YACE,uBAAIM,KACJ,uCAAeC,UAJTF,EAQb,GAAE,KAGR,E,oBCPD,EAVa,WACX,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAmCE,EAAAA,EAAAA,IAAwBF,GAAnDG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UAErB,GADAC,QAAQC,IAAIJ,IACRE,EACJ,OAAID,GAAUI,EAAA,OAAgBC,EAAAA,EAAAA,sBAEtBN,EAAKO,KAAKC,QAAO,SAAC7B,EAAD,CAAUC,MAASoB,EAAKO,QAAU,uBAAIE,EAAAA,EAAAA,SAChE,C,qECZYJ,EAAa,SAACK,GAAD,OAASC,EAAAA,GAAAA,MAAYD,EAArB,C,wFCCbjB,EAAW,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,MAAOiB,EAAe,EAAfA,SAEvCC,EADaC,EAAAA,GAAWnB,EACDD,EAC7B,OAAO,SAAC,IAAD,UACJA,GAAc,gBAAKqB,IAAKF,EAASG,IAAKtB,IAAkBkB,GAE5D,C,8ECTM,IAAMN,EAAS,CACpBW,iBAAkB,uCAClBC,qBAAsB,kDACtBC,qBAAsB,gCACtBC,qBAAsB,uCAGXX,EAAM,CACjBY,QAAS,2CACTC,UAAW,2C","sources":["components/CastList.jsx","components/Cast.jsx","components/ErrorToast.jsx","components/ImageBox.jsx","components/Strings.js"],"sourcesContent":["import { Box } from 'components/Box';\nimport { BsPerson } from \"react-icons/bs\";\nimport { ImageBox } from 'components/ImageBox';\n\nconst width = 185;\n\nexport const CastList = ({ casts }) => {\n  const gridTmpl = `repeat(auto-fit, minmax(${width}px, 1fr))`;\n  return (\n    <Box as=\"ul\" display=\"grid\" gridTemplateColumns={gridTmpl} >\n      {casts.map(({ cast_id, name, character, profile_path }) => {\n        return (\n          <Box key={cast_id} as=\"li\" p={2} display=\"grid\" alignContent=\"space-between\">\n            <ImageBox poster_path={profile_path} width={width} ><BsPerson size={width} /></ImageBox>\n            <Box>\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </Box>\n          </Box>\n        );\n      }, \"\")}\n      </Box>\n  );\n};","import { useParams } from \"react-router-dom\";\nimport { useGetMovieCreditsQuery } from \"api/themoviedb\"\nimport { CastList } from \"components/CastList\"\nimport { ErrorToast } from \"components/ErrorToast\"\nimport { Errors, Msg } from \"components/Strings\"\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { data, error, isLoading } = useGetMovieCreditsQuery(movieId);\n  console.log(data);\n  if (isLoading) { return }\n  if (error) { <ErrorToast msg={Errors.getMovieCreditsError} />; return }\n\n  return (data.cast.length?<CastList casts = {data.cast } />:<p>{Msg.noCasts}</p>)\n}  \n\nexport default Cast;\n","import { toast } from 'react-hot-toast';\n\nexport const ErrorToast = (msg) => toast.error(msg)","import { Box } from 'components/Box';\nimport {baseImgUrl} from 'components/NavDeclarations'\n\nexport const ImageBox = ({ poster_path, width, children }) => {\n  const serverPath = baseImgUrl+width;\n  const imgPath = serverPath + poster_path;\n  return <Box>\n    {poster_path ? <img src={imgPath} alt={poster_path} /> : children}\n  </Box>\n}\n","export const Errors = {\n  getTrendingError: 'Error: unable to load trending films',\n  getMovieCreditsError: 'Error: unable to load —Åast members details',\n  getMovieRewiewsError: 'Error: unable to load rewiews',\n  getMovieDetailsError: 'Error: unable to load movie details',\n};\n\nexport const Msg = {\n  noCasts: \"We don't have cast info about this movie\",\n  noReviews: \"We don't have any reviews for this movie\",\n};\n"],"names":["CastList","casts","gridTmpl","Box","as","display","gridTemplateColumns","map","cast_id","name","character","profile_path","p","alignContent","ImageBox","poster_path","width","size","movieId","useParams","useGetMovieCreditsQuery","data","error","isLoading","console","log","ErrorToast","Errors","cast","length","Msg","msg","toast","children","imgPath","baseImgUrl","src","alt","getTrendingError","getMovieCreditsError","getMovieRewiewsError","getMovieDetailsError","noCasts","noReviews"],"sourceRoot":""}